import re
import string

# List of common weak passwords (this list can be expanded)
COMMON_PASSWORDS = ["password", "123456", "123456789", "qwerty", "abc123", "letmein", "welcome", "password1", "1234", "12345"]

def check_password_length(password):
    """Check the length of the password."""
    if len(password) < 8:
        return "Weak (password is too short)"
    elif len(password) < 12:
        return "Moderate (password length is acceptable)"
    else:
        return "Strong (good length)"

def check_password_complexity(password):
    """Check the complexity of the password (uppercase, lowercase, digits, special characters)."""
    complexity_score = 0
    if re.search(r'[a-z]', password): complexity_score += 1  # Lowercase letter
    if re.search(r'[A-Z]', password): complexity_score += 1  # Uppercase letter
    if re.search(r'[0-9]', password): complexity_score += 1  # Number
    if re.search(r'[!@#$%^&*(),.?":{}|<>]', password): complexity_score += 1  # Special character
    
    if complexity_score == 4:
        return "Strong (contains all character types)"
    elif complexity_score == 3:
        return "Moderate (contains most character types)"
    elif complexity_score == 2:
        return "Weak (lacks variety)"
    else:
        return "Very Weak (too simple)"

def check_password_uniqueness(password):
    """Check if the password is unique (not in common passwords or simple patterns)."""
    if password.lower() in COMMON_PASSWORDS:
        return "Weak (common password)"
    elif re.search(r'(.)\1{2,}', password):  # Detect repeating characters (e.g., aaa, 111)
        return "Weak (contains repeating characters)"
    elif password.isalpha() or password.isdigit():  # Check if the password is only letters or only digits
        return "Weak (too simple, letters or digits only)"
    else:
        return "Unique (password is uncommon)"

def assess_password_strength(password):
    """Assess the overall strength of the password."""
    length_feedback = check_password_length(password)
    complexity_feedback = check_password_complexity(password)
    uniqueness_feedback = check_password_uniqueness(password)

    strength_score = 0
    if "Strong" in length_feedback: strength_score += 1
    if "Strong" in complexity_feedback: strength_score += 1
    if "Unique" in uniqueness_feedback: strength_score += 1

    overall_strength = "Weak"
    if strength_score == 3:
        overall_strength = "Very Strong"
    elif strength_score == 2:
        overall_strength = "Strong"
    elif strength_score == 1:
        overall_strength = "Moderate"

    return {
        "Length Feedback": length_feedback,
        "Complexity Feedback": complexity_feedback,
        "Uniqueness Feedback": uniqueness_feedback,
        "Overall Strength": overall_strength
    }

# Example usage:
password = input("Enter your password: ")
strength_feedback = assess_password_strength(password)

# Display feedback
for key, value in strength_feedback.items():
    print(f"{key}: {value}")
